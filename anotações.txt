\std = standart (padrão) utiliza da classe padrão;

!! Rodar programa C++
g++ nomeprograma.cpp -o nomeprogramacompilado.out

./nomeprogramacompilado.out

!! Definir blocos de codigos utilizados na classee
using namespace std;

!! Utilizar make windows
mingw32-make nomeArquivo

!! const por padrão colocar em CAPSLOCK

!! map utilizado para criar dicionarios em C++
tipo de dado e valor que recebe
map<char, bool> nome dele

!! usar variaveis externas
extern variavel

!! como é compilado o arquivo
http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/build.html
Entender as instrução de pre-processamento (# tudo com # exemplo #include)
#pragma once utilizado para não importar arquivos já importados

Depois disso é gerado uma unidade de tradução, unit translate

g++ -c arquivo.cpp
vai retornar uma arquivo.o arquivo que o processador vai entender

!! processo de linking, linkando arquivos traduzidos

// Compilar
g++ -c *.cpp

// Juntar os arquivos compilados
g++ *.o -o arquivo.out

//inline para fazer a copia de instruções, dar uma dica para ele copiar elas, colocar a implementação no header
Vantagem é a performance

//Ponteiro
utilizado para não fazer uma copia de outra variavel mas sim pegar uma por referencia de memoria
passando uma referencia de memoria
&variavel
parametro
tipo* nomevariavel

deferencia (*variavel)
errors_kicks->func

!!variavel static, só existe no contexto

!!namespace como se fosse uma pagina virtual
vai precisar usar o operador de acesso :: 

namespace Nome {
}

ou

void Nome::NomeMethod

using namespace para não usar o :: nos metodos

porque não usar o using namespace nos arquivos de cabeçalhos, cuidar para não tirar o poder das bibliotecas


//Referencia
std::string&
pega o mesmo endereço de memoria de uma variavel, e retorna seu valor, assim não copia a variavel


!!stack é um espaço de memoria alocado para um determinado codigo exemplo variaveis e no final do metodo essa stack é
desalocada

!!heap criar espaços na memoria e deixar alocada
int* func() {

    //Criando endereço de memoria int    
    int* j = new int;
    *j = 5;
    return j;
}

int main()
{
    int* i;
    i = func();
    delete i;
}


!!usando pra executar tal codigo
    #if 0
    #endIf

!!Variaveis de uma classe são chamados de atributos/propriedades

!!Quando criamos um objeto, falamos que instanciamos
Conta conta = new Conta();

!!Classe é uma forma para criar os objetos

!!Programação orientação objeto é um paradigma da programação utilizando classes e objetos

ABSTRACAO
Basicamente abstração é a habilidade de trazer para o sistema o que é essencial de ser representado. Por exemplo, uma conta do mundo real possui número da agência, limite de crédito, código do banco, etc. Mas nós abstraímos estes conceitos para representarmos somente os dados necessários.

É muito importante que este conceito esteja claro para que código inútil não seja desenvolvido.


Design Early Returns in C++
https://www.fluentcpp.com/2018/08/24/how-to-design-early-returns-in-c-based-on-procedural-programming/

Encapsulamento - mais um pilar da OO
Encapsulamento - restringir os dados e permitir só os dados que você quer
tornar um dado encapsulado é deixar ele privado
atraves dos metodos de acesso (getters e setters) é alcançado o encapsulamento


CLASS X STRUCT

Classe todos os dados são privados e no struct são publics

Lista de inicialização
https://www.youtube.com/watch?v=1nfuYMXjZsA

IMUTABILIDADE
Utilizar o construtor para não mudar os valores das variaveis

static, quando é static o atributo não se refere ao objeto, mas sim a classe, exemplo Classe Conta e objeto umaConta,
a atributo vai pertencer a classe Conta

Método destrutor
~Conta();
é comum quando abre alguma instancia de algo, e no destrutor derrete, se abriu um arquivo no construtor no destrutor o arquivo vai ser fechado


Conversão implicita
"STRING" só isso é um vetor de caracteres

string("string") aqui é uma string

Criação de objetos

new classe, assim vai alocar na HEAP

CPF* cpf = new CPF();
É possível alocar um objeto na heap através do new
O operador new não só reserva o espaço de memória para um objeto, mas também chama seu construtor
Copiar objetos é custoso e devemos evitar sempre que possível	

Composição e copia

Evitando copias com &
passar paramentros de classes como classe mesmo e não variavel, para não gerar copias

HERANÇA
um Funcionario é uma Pessoa e também que um Titular é uma Pessoa.

Essa realação é dada através da sintaxe class Funcionario : public Pessoa. Repare no uso de : public neste local.

O uso de : indica que tudo que existe em Pessoa passará a existir também em Funcionario. É como se Funcionario herdasse todos os membros.

Por isso o nome deste conceito é Herança. Vamos falar muito mais sobre isso neste treinamento, mas é válido dizer desde já que a Herança é um dos pilares da orientação a objetos, e por isso é importante que entendamos bem seu funcionamento.

protected
as variaveis podem ser acessadas pelos herdeiros.


Agora que já entendemos sobre herança e conhecemos o modificador protected, podemos falar sobre os tipos de herança: Pública, protegida e privada.

Repare, novamente, na sintaxe utilizada para realizar herança:

class Funcionario : public Pessoa
{
…
};

Discutimos anteriormente o que significa o uso do : nesse contexto. E o uso de public aqui informa que tudo que é público na classe Pessoa permanecerá público na classe Funcionario.

Se fizéssemos class Funcionario : protected Pessoa, tudo que na classe Pessoa é público, se torna protegido (protected) na classe Funcionario.

E como você já deve imaginar, se fizermos class Funcionario : private Pessoa, todos os membros públicos e protegidos em Pessoa se tornam privados em Funcionario.

É muito mais comum termos herança usando : public pois ele não altera nada, mas é importante conhecer os demais tipos.

Também é válido ressaltar que os membros privados continuam existindo na classe Funcionario, mas não são acessíveis. Somente através de métodos públicos e protegidos nós podemos acessar os membros definidos como privados em Pessoa.

metodos virtuais
utilizados como o abstract no JAVA

metodos virtuais podem ser mais demorados que metodos não virtuais, perdem um pouco de performance
A decisão sobre qual método chamar não é mais tomada pelo linker e sim pelo código em tempo de execução.

virtual tipoRetorno nomeMethod
virtual void sacar(float valorASacar);

override
Especificar para o compilador que está sobrescrevendo um method

Vtable = tabela virtual, onde vamos ter os ponteiros para as funções corretas

destrutor virtual, para que o destrutor da classe derivada possa ser adicionado sem nenhuma complicação
virtual ~Conta();

final, para definir que não pode herdar desta classe
class ContaPoupanca final : public Conta
{
}

Method puramente virtual
ele não vai ter implementação na classe pai, e obriga as classes filhas implementar o metohod
virtual float taxaDeSaque() const = 0;

Classe abstracta em c++ é uma classe que possua um ou mais method puramente virtuais

Utiliza a herança para utilizar o Polimorfismo **muitas formas**
Polimorfismo, o mesmo objeto pode ser representado de varias formas

Uma contaCorrente pode ser representada como ContaCorrente ou como Conta

// mesma coisa
Conta* ponteiroParaConta = new ContaPoupanca()
ContaPoupanca* ponteiroParaConta = new ContaPoupanca()

// mesma coisa
Conta* ponteiroParaConta = new ContaCorrente()
ContaCorrente* ponteiroParaConta = new ContaCorrente()

Herança multipla
pode herdar de mais de uma classe

class Titular : public Pessoa, Autenticavel
{}

class Titular : public Pessoa, public Autenticavel
{}


Tipos enumerados
enum as variaveis são definidos no escopo geral

enum class vai limitar as variaveis do enum somente para o seu escopo

Sobrecarga de operador
Operator overload
void operator+=();
void operator+();

não é possivel fazer sobrecarga de metodos em classes com herança

para chamar o method correto precisa fazer cast

(Conta&) umaOutraConta += 300;

https://www.geeksforgeeks.org/does-overloading-work-with-inheritance/

Friend function

utilizadas para acessar dados privados de classes.
Quando uma função já existente e conhecida precisa de acesso a membros não acessíveis.