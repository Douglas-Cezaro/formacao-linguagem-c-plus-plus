\std = standart (padrão) utiliza da classe padrão;

!! Rodar programa C++
g++ nomeprograma.cpp -o nomeprogramacompilado.out

./nomeprogramacompilado.out

!! Definir blocos de codigos utilizados na classee
using namespace std;

!! Utilizar make windows
mingw32-make nomeArquivo

!! const por padrão colocar em CAPSLOCK

!! map utilizado para criar dicionarios em C++
tipo de dado e valor que recebe
map<char, bool> nome dele

!! usar variaveis externas
extern variavel

!! como é compilado o arquivo
http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/build.html
Entender as instrução de pre-processamento (# tudo com # exemplo #include)
#pragma once utilizado para não importar arquivos já importados

Depois disso é gerado uma unidade de tradução, unit translate

g++ -c arquivo.cpp
vai retornar uma arquivo.o arquivo que o processador vai entender

!! processo de linking, linkando arquivos traduzidos

// Compilar
g++ -c *.cpp

// Juntar os arquivos compilados
g++ *.o -o arquivo.out

//inline para fazer a copia de instruções, dar uma dica para ele copiar elas, colocar a implementação no header
Vantagem é a performance

//Ponteiro
utilizado para não fazer uma copia de outra variavel mas sim pegar uma por referencia de memoria
passando uma referencia de memoria
&variavel
parametro
tipo* nomevariavel

deferencia (*variavel)
errors_kicks->func

!!variavel static, só existe no contexto

!!namespace como se fosse uma pagina virtual
vai precisar usar o operador de acesso :: 

namespace Nome {
}

ou

void Nome::NomeMethod

using namespace para não usar o :: nos metodos

porque não usar o using namespace nos arquivos de cabeçalhos, cuidar para não tirar o poder das bibliotecas


//Referencia
std::string&
pega o mesmo endereço de memoria de uma variavel, e retorna seu valor, assim não copia a variavel


!!stack é um espaço de memoria alocado para um determinado codigo exemplo variaveis e no final do metodo essa stack é
desalocada

!!heap criar espaços na memoria e deixar alocada
int* func() {

    //Criando endereço de memoria int    
    int* j = new int;
    *j = 5;
    return j;
}

int main()
{
    int* i;
    i = func();
    delete i;
}


!!usando pra executar tal codigo
    #if 0
    #endIf

!!Variaveis de uma classe são chamados de atributos/propriedades

!!Quando criamos um objeto, falamos que instanciamos
Conta conta = new Conta();

!!Classe é uma forma para criar os objetos

!!Programação orientação objeto é um paradigma da programação utilizando classes e objetos

ABSTRACAO
Basicamente abstração é a habilidade de trazer para o sistema o que é essencial de ser representado. Por exemplo, uma conta do mundo real possui número da agência, limite de crédito, código do banco, etc. Mas nós abstraímos estes conceitos para representarmos somente os dados necessários.

É muito importante que este conceito esteja claro para que código inútil não seja desenvolvido.


Design Early Returns in C++
https://www.fluentcpp.com/2018/08/24/how-to-design-early-returns-in-c-based-on-procedural-programming/

Encapsulamento - mais um pilar da OO
Encapsulamento - restringir os dados e permitir só os dados que você quer
tornar um dado encapsulado é deixar ele privado
atraves dos metodos de acesso (getters e setters) é alcançado o encapsulamento


CLASS X STRUCT

Classe todos os dados são privados e no struct são publics

Lista de inicialização
https://www.youtube.com/watch?v=1nfuYMXjZsA

IMUTABILIDADE
Utilizar o construtor para não mudar os valores das variaveis

static, quando é static o atributo não se refere ao objeto, mas sim a classe, exemplo Classe Conta e objeto umaConta,
a atributo vai pertencer a classe Conta
